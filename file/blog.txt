-- MySQL Script generated by MySQL Workbench
-- Fri Sep  4 21:46:08 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema blog
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema blog
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `blog` DEFAULT CHARACTER SET utf8 ;
USE `blog` ;

-- -----------------------------------------------------
-- Table `blog`.`image`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`image` (
  `id_image` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `alt` VARCHAR(255) NOT NULL,
  `src` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id_image`),
  UNIQUE INDEX `id_image_UNIQUE` (`id_image` ASC),
  UNIQUE INDEX `src_UNIQUE` (`src` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`userClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`userClass` (
  `id_userClass` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`id_userClass`),
  UNIQUE INDEX `id_userClass_UNIQUE` (`id_userClass` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`user` (
  `id_user` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(16) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `hash` CHAR(64) NOT NULL,
  `creation` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `bio` VARCHAR(255) NULL,
  `userClass_id_userClass` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_user`, `userClass_id_userClass`),
  UNIQUE INDEX `id_second_UNIQUE` (`id_user` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  INDEX `fk_user_userClass1_idx` (`userClass_id_userClass` ASC),
  CONSTRAINT `fk_user_userClass1`
    FOREIGN KEY (`userClass_id_userClass`)
    REFERENCES `blog`.`userClass` (`id_userClass`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`topic`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`topic` (
  `id_topic` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL,
  `link` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`id_topic`),
  UNIQUE INDEX `id_topic_UNIQUE` (`id_topic` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `link_UNIQUE` (`link` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`article`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`article` (
  `id_article` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_topic` INT UNSIGNED NOT NULL,
  `title` VARCHAR(32) NOT NULL,
  `content` TEXT NOT NULL,
  `link` VARCHAR(32) NULL,
  `keywords` VARCHAR(255) NOT NULL,
  `digest` VARCHAR(100) NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `modified` TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `public` TINYINT(1) NOT NULL DEFAULT 0,
  `next` INT UNSIGNED NULL,
  `id_image` INT UNSIGNED NOT NULL,
  `id_user` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_article`, `id_topic`),
  UNIQUE INDEX `id_tableName_UNIQUE` (`id_article` ASC),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC),
  INDEX `fk_article_article_idx` (`next` ASC),
  INDEX `fk_article_image1_idx` (`id_image` ASC),
  INDEX `fk_article_user1_idx` (`id_user` ASC),
  INDEX `fk_article_topic1_idx` (`id_topic` ASC),
  CONSTRAINT `fk_article_article`
    FOREIGN KEY (`next`)
    REFERENCES `blog`.`article` (`id_article`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_article_image1`
    FOREIGN KEY (`id_image`)
    REFERENCES `blog`.`image` (`id_image`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_article_user1`
    FOREIGN KEY (`id_user`)
    REFERENCES `blog`.`user` (`id_user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_article_topic1`
    FOREIGN KEY (`id_topic`)
    REFERENCES `blog`.`topic` (`id_topic`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`permission` (
  `id_permission` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id_permission`),
  UNIQUE INDEX `id_permission_UNIQUE` (`id_permission` ASC),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`consent` (
  `id_consent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `creation` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_consent`),
  UNIQUE INDEX `id_consent_UNIQUE` (`id_consent` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`article_views`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`article_views` (
  `article_id_article` INT UNSIGNED NOT NULL,
  `views` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`article_id_article`),
  UNIQUE INDEX `article_id_article_UNIQUE` (`article_id_article` ASC),
  CONSTRAINT `fk_article_views_article1`
    FOREIGN KEY (`article_id_article`)
    REFERENCES `blog`.`article` (`id_article`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`user_consent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`user_consent` (
  `user_id_user` INT UNSIGNED NOT NULL,
  `consent_id_consent` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_id_user`, `consent_id_consent`),
  INDEX `fk_user_has_consent_consent1_idx` (`consent_id_consent` ASC),
  INDEX `fk_user_has_consent_user1_idx` (`user_id_user` ASC),
  CONSTRAINT `fk_user_has_consent_user1`
    FOREIGN KEY (`user_id_user`)
    REFERENCES `blog`.`user` (`id_user`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_user_has_consent_consent1`
    FOREIGN KEY (`consent_id_consent`)
    REFERENCES `blog`.`consent` (`id_consent`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`userClass_permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`userClass_permission` (
  `userClass_id_userClass` INT UNSIGNED NOT NULL,
  `permission_id_permission` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`userClass_id_userClass`, `permission_id_permission`),
  INDEX `fk_userClass_has_permission_permission1_idx` (`permission_id_permission` ASC),
  INDEX `fk_userClass_has_permission_userClass1_idx` (`userClass_id_userClass` ASC),
  CONSTRAINT `fk_userClass_has_permission_userClass1`
    FOREIGN KEY (`userClass_id_userClass`)
    REFERENCES `blog`.`userClass` (`id_userClass`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_userClass_has_permission_permission1`
    FOREIGN KEY (`permission_id_permission`)
    REFERENCES `blog`.`permission` (`id_permission`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `blog` ;

-- -----------------------------------------------------
-- Placeholder table for view `blog`.`publicArticles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `blog`.`publicArticles` (`id_article` INT, `id_topic` INT, `title` INT, `link` INT, `src` INT, `name` INT, `content` INT, `digest` INT, `keywords` INT, `creation` INT, `modified` INT, `id_user` INT);

-- -----------------------------------------------------
-- View `blog`.`publicArticles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`publicArticles`;
USE `blog`;
CREATE  OR REPLACE VIEW `publicArticles` AS
  SELECT
    a.id_article,
    t.id_topic,
    c.title,
    c.link,
    i.src,
    i.name,
    A.content,
    A.digest,
    A.keywords,
    a.creation,
    a.modified,
    a.id_user
  FROM article a
    JOIN image i ON a.id_image = i.id_image
    JOIN topic t ON a.id_topic = t.id_topic
  WHERE a.public = 1;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
